{"version":3,"sources":["components/Filter/Filter.module.scss","components/Notification/Notification.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","components/Notification/Notification.js","App.js","index.js","components/ContactsList/ContactsList.module.scss"],"names":["module","exports","ContactForm","state","id","name","number","inputFormId","uuidv4","handleInputChangeEvent","event","currentTarget","value","setState","handleSubmit","e","preventDefault","props","onSubmit","reset","this","className","styles","contact_form","input_name","type","pattern","title","onChange","required","button","Component","Filter","form","ContactsList","contacts","onDeleteContact","contact_list","map","contact_item","onClick","Notification","message","App","filter","formSubmitHandler","data","find","toLowerCase","alert","prevState","getVisibleContacts","normalizedFilter","contact","includes","changeFilter","deleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","Fragment","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7726b800.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__30cdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__2vOHA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__2qj8b\",\"input_name\":\"ContactForm_input_name__JCTER\",\"button\":\"ContactForm_button__1007G\"};","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport styles from \"./ContactForm.module.scss\";\n\nclass ContactForm extends Component {\n  state = {\n    id: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  inputFormId = uuidv4();\n\n  handleInputChangeEvent = (event) => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value, id: uuidv4() });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.contact_form}>\n        <label>\n          <p className={styles.input_name}>Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            value={this.state.name}\n            onChange={this.handleInputChangeEvent}\n            required\n          />\n        </label>\n        <label>\n          <p className={styles.input_name}>Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            value={this.state.number}\n            onChange={this.handleInputChangeEvent}\n            required\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.scss\";\n\nconst Filter = ({ value, onChange }) => (\n  <form className={styles.form}>\n    <label>\n      <p>Find contacts by name</p>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  </form>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport styles from \"./ContactsList.module.scss\";\n\nconst ContactsList = ({ contacts, onDeleteContact }) => (\n  <ul className={styles.contact_list}>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id} className={styles.contact_item}>\n        <span>\n          {name}: {number}\n        </span>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n          className={styles.button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Notification.module.scss\";\n\nconst Notification = ({ message }) => (\n  <h3 className={styles.title}>{message}</h3>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactsList from \"./components/ContactsList\";\nimport Notification from \"./components/Notification\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  formSubmitHandler = (data) => {\n    const { contacts } = this.state;\n\n    if (\n      contacts.find(\n        ({ name }) => name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n    } else {\n      this.setState((prevState) => {\n        return {\n          contacts: [...[data], ...prevState.contacts],\n        };\n      });\n    }\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n        {contacts.length > 0 ? (\n          <React.Fragment>\n            <Filter value={filter} onChange={this.changeFilter} />\n            <ContactsList\n              contacts={this.getVisibleContacts()}\n              onDeleteContact={this.deleteContact}\n            />\n          </React.Fragment>\n        ) : (\n          <Notification message=\"Empty contacts list\" />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.scss\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactsList_contact_list__252_C\",\"contact_item\":\"ContactsList_contact_item__sU5hE\",\"button\":\"ContactsList_button__2Uuuy\"};"],"sourceRoot":""}